apiVersion: apps/v1
{{- if eq .Values.stage "development"}}
kind: StatefulSet
{{- else }}
kind: Deployment
{{- end }}
metadata:
  name: app
  labels:
    app: app
spec:
  selector:
    matchLabels:
      app: app
  {{- if eq .Values.stage "development"}}
  serviceName: app
  {{- else }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  {{- end }}
  replicas: {{ ternary 1 0 .Values.enabled }}
  template:
    metadata:
      labels:
        app: app
    spec:
      terminationGracePeriodSeconds: 10
      imagePullSecrets:
        - name: diploi-pull-secret
      {{- if eq .Values.stage "development"}}
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
      initContainers:
        - name: install-dependencies
          image: {{ .Values.images.app }}
          imagePullPolicy: Always
          command: ['npm', 'install']
          workingDir: /app{{ .Values.folder }}
          env:
          - name: NODE_ENV
            value: development
          volumeMounts:
            - name: app-mount
              mountPath: /app
      {{- end }}
      {{- if ne .Values.stage "development"}}
      initContainers:
        - name: build-with-env
          securityContext:
            runAsUser: 0
            runAsGroup: 0
          image: {{ .Values.images.app }}
          imagePullPolicy: Always
          command:
            - /bin/sh
            - -c
            - |
              if [ -f yarn.lock ]; then yarn run build; \
              elif [ -f package-lock.json ]; then npm run build; \
              elif [ -f pnpm-lock.yaml ]; then corepack enable pnpm && pnpm run build; \
              else echo "Lockfile not found." && exit 1; \
              fi &&
              find /build -mindepth 1 -exec rm -rf {} + &&
              find . -mindepth 1 -maxdepth 1 -exec mv {} /build/ \; &&
              chown -R 1000:1000 /build
          volumeMounts:
            - name: build-mount
              mountPath: /build
      {{- end }}
      containers:
        - name: app
          image: {{ .Values.images.app }}
          imagePullPolicy: Always
          {{- if not (eq .Values.stage "development") }}
          ports:
            - containerPort: 80
          {{- end }}
          resources:
            requests:
              memory: 500Mi
            limits:
              memory: 1000Mi
          {{- if eq .Values.stage "development" }}
          workingDir: /app{{ .Values.folder }}
          {{- end }}
          env:
            {{- range .Values.env }}
            - name: {{ .identifier }}
              value: {{ .value | quote }}
            {{- end }}
            - name: APP_PUBLIC_URL
              value: {{ .Values.hosts.app }}
            - name: STAGE
              value: {{ .Values.stage }}
          volumeMounts:
            {{- if hasKey .Values.storage "code" }}
            - name: app-mount
              mountPath: /app
            {{- end }}
            {{- if ne .Values.stage "development"}}
            - name: build-mount
              mountPath: /app
            {{- end }}
        {{- if eq .Values.stage "development"}}
        - name: nginx
          image: nginx:1.29-alpine
          ports:
            - name: http
              containerPort: 80
          volumeMounts:
            - name: nginx-config
              mountPath: /etc/nginx/conf.d
              readOnly: true
          securityContext:
            runAsUser: 0               # root
            runAsGroup: 0
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
        {{- end }}
      volumes:
        {{- if hasKey .Values.storage "code" }}
        - name: app-mount
          hostPath:
            path: {{ .Values.storage.code.hostPath }}
        - name: nginx-config
          configMap:
            name: nginx-config
        {{- end }}
        {{- if hasKey .Values.storage "build" }}
        - name: build-mount
          hostPath:
            path: {{ .Values.storage.build.hostPath }}
        {{- end }}
